//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SaveGameEditor.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SaveGameEditor.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable value contains non-numeric characters! Please try again..
        /// </summary>
        public static string BadVariableValueMessage {
            get {
                return ResourceManager.GetString("BadVariableValueMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save file is empty or corrupt! Please specify a different one..
        /// </summary>
        public static string CorruptSaveMessage {
            get {
                return ResourceManager.GetString("CorruptSaveMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while saving DLL!.
        /// </summary>
        public static string DLLSaveErrorMessage {
            get {
                return ResourceManager.GetString("DLLSaveErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Note that the &apos;Edit Mode&apos; is experimental. In some cases, it might make the game crash unexpectedly, or even completely refuse to save to or load from the modified file, not to mention causing tornados in and around Arcadia Bay.
        ///
        ///Variables/Floats: Select a cell (or a range of cells) using the mouse or the arrow keys, and type in the new value. If you accidentally selected the wrong cell(s), then press ESC to cancel the edit.
        ///
        ///Flags: Simply check or uncheck the respective boxes in the table. You can use  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string EditModeHelpFirst {
            get {
                return ResourceManager.GetString("EditModeHelpFirst", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variables/Floats: Select a cell (or a range of cells) using the mouse or the arrow keys, and type in the new value. If you accidentally selected the wrong cell(s), then press ESC to cancel the edit.
        ///
        ///Flags: Simply check or uncheck the respective boxes in the table. You can use the mouse or the arrow keys and Spacebar. To edit multiple flags at once, select them and press Shift+T (True) of Shift+F (False).
        ///
        ///Newly edited but unsaved cells are marked with yellow. Editing of gray-colored cells is not permit [rest of string was truncated]&quot;;.
        /// </summary>
        public static string EditModeHelpIconMessage {
            get {
                return ResourceManager.GetString("EditModeHelpIconMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Saved successfully!.
        /// </summary>
        public static string EditsSuccessfullySavedMessage {
            get {
                return ResourceManager.GetString("EditsSuccessfullySavedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 0618b7e56989495b9196add8c4d9aa0b
        ///132043c0013d4f9fb5f43f6f4fa5d2d3
        ///25a31f6308ef4d0894bfe54888033f76
        ///299b95eb1e12419f9d814ee65beed089
        ///2b63b02392c04edfb2d2a83f9cb86d4e
        ///2cb44bb95e4742ae85a7e4a9d3095729
        ///371e9787bc0c47bcacf152ad60227465
        ///3c0ffd68526f418e93141666d764f786
        ///3dc3a39bc34e4bb9a9dcd511c1c221c2
        ///4015612092e3417898097e5c6327b94a
        ///47730ac35c6e4d8dad00ab4f74447cbf
        ///55218e9784644c6ca277b73e35000dc6
        ///5bae5f16a9004041a88de217f77167cc
        ///68e6607764984ea282a97cf3f121ef3d
        ///6c2d3340acc74414a748039f1f013304
        ///6d [rest of string was truncated]&quot;;.
        /// </summary>
        public static string FlagList {
            get {
                return ResourceManager.GetString("FlagList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BurnerSMSIndex
        ///BurnerSMSOrder_e3_s05_damon_1
        ///BurnerSMSOrder_e3_s05_damon_12
        ///BurnerSMSOrder_e3_s05_damon_14
        ///BurnerSMSOrder_e3_s05_damon_15
        ///BurnerSMSOrder_e3_s05_damon_16
        ///BurnerSMSOrder_e3_s05_damon_17
        ///BurnerSMSOrder_e3_s05_damon_18
        ///BurnerSMSOrder_e3_s05_damon_19
        ///BurnerSMSOrder_e3_s05_damon_2
        ///BurnerSMSOrder_e3_s05_damon_20
        ///BurnerSMSOrder_e3_s05_damon_21
        ///BurnerSMSOrder_e3_s05_damon_22
        ///BurnerSMSOrder_e3_s05_damon_3
        ///BurnerSMSOrder_e3_s05_damon_4
        ///BurnerSMSOrder_e3_s05_damon_5
        ///BurnerSMSOrder_e3_s05 [rest of string was truncated]&quot;;.
        /// </summary>
        public static string FloatList {
            get {
                return ResourceManager.GetString("FloatList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap Help {
            get {
                object obj = ResourceManager.GetObject("Help", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://github.com/IgelRM/LiS-BtS-Savegame-viewer.
        /// </summary>
        public static string ProjectHomepage {
            get {
                return ResourceManager.GetString("ProjectHomepage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have chosen the following date:
        ///
        ///{0}
        ///
        ///Do you want to proceed with the changes ?.
        /// </summary>
        public static string RewindDateOnlyMessage {
            get {
                return ResourceManager.GetString("RewindDateOnlyMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A few notes on the Checkpoint Rewind feature:
        ///
        ///1. It has not been extensively tested and may cause unintended consequences. Users are advised to make backups of their data before proceeding further.
        ///
        ///2. If you are on a mid-level checkpoint, then selecting the last item in the checkpoint list will still cause the game to start from the beginning of that point.
        ///
        ///3. If you want to change only the date of the save, don&apos;t touch the checkpoint list at all. To reset the state of the list, click &quot;Load&quot; again..
        /// </summary>
        public static string RewindHelpFirstMessage {
            get {
                return ResourceManager.GetString("RewindHelpFirstMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Press Load to display the list of available checkpoints. Select the one that you would like to restart from and press Save. You can optionally change the &quot;save date&quot; that is displayed when switching between save slots.
        ///
        ///If you are on a mid-level checkpoint, then selecting the last item in the checkpoint list will still cause the game to start from the beginning of that point.
        ///
        ///If you want to change only the date of the save, don&apos;t touch the checkpoint list at all. To reset the state of the list, click &quot; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RewindHelpIconMessage {
            get {
                return ResourceManager.GetString("RewindHelpIconMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Warning! ALL your progress after the checkpoint specified
        ///below will be lost! The target checkpoint is:
        ///
        ///{0}
        ///{1}
        ///
        ///Are you sure you want to continue?.
        /// </summary>
        public static string RewindProgressLostMessage {
            get {
                return ResourceManager.GetString("RewindProgressLostMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The changes have been successfully written to the save files!
        ///Do you want to do something else?.
        /// </summary>
        public static string RewindSuccessfullySavedMessage {
            get {
                return ResourceManager.GetString("RewindSuccessfullySavedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Press Ctrl+F to search in the table!.
        /// </summary>
        public static string SearchHelpMessage {
            get {
                return ResourceManager.GetString("SearchHelpMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The backup was successful!.
        /// </summary>
        public static string SuccessfulBackupMessage {
            get {
                return ResourceManager.GetString("SuccessfulBackupMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are unsaved edits left! Exit without saving?.
        /// </summary>
        public static string UnsavedEditsWarningMessage {
            get {
                return ResourceManager.GetString("UnsavedEditsWarningMessage", resourceCulture);
            }
        }
    }
}
